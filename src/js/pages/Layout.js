import React, { Component } from 'react';
import { Link } from "react-router";
import Footer from "../components/layout/Footer";
import Nav from "../components/layout/Nav";
import { meFromToken, meFromTokenSuccess, meFromTokenFailure, resetToken } from '../actions/users';
import { connect } from "react-redux"
//import { connect } from "http2";

const mapDispatchToProps = (dispatch) => {
  return {
    loadUserFromToken: () => {
      let token = sessionStorage.getItem('jwtToken');
      if (!token || token === '') {//if there is no token, dont bother
        return;
      }

      let xx = {
            "data": {
                "user": {
                    "id": "2",
                    "name": "arden",
                    "email": "kharddie@gmail.com"
                }
            },
            "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiMiJ9.ppAc_KRukLqkHhji-kBm2BKAn0eM8S0hcKncWxUKd2I}"
        };

    
 
      
      
      dispatch(meFromTokenSuccess(xx))
      //fetch user from token (if server deems it's valid token)
     /* dispatch(meFromToken(token))
        .then((response) => {
          if (!response.error) {
            //reset token (possibly new token that was regenerated by the server)
            sessionStorage.setItem('jwtToken', response.payload.data.token);
            dispatch(meFromTokenSuccess(response.payload))
          } else {
            sessionStorage.removeItem('jwtToken');//remove token from storage
            dispatch(meFromTokenFailure(response.payload));
          }
        });
        */
    },
    resetMe: () => {
      sessionStorage.removeItem('jwtToken'); //remove token from storage
      dispatch(resetToken());
    }
  }
}

class Layout extends React.Component {
  componentWillMount() {
    this.props.loadUserFromToken();
  }
  render() {
    const { location } = this.props;
    const containerStyle = {
      marginTop: "60px"
    };
    console.log("THIS IS THE LAYOUT COMPONENT");
    return (
      <div>

        <Nav location={location} />

        <div className="container" style={containerStyle}>
          <div className="row">
            <div className="col-lg-12">
              {this.props.children}
            </div>
          </div>
          <Footer />
        </div>
      </div>

    );
  }
}

export default connect(null,mapDispatchToProps)(Layout)
